// <auto-generated />
using System;
using FBS.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBS.Repositories.Migrations
{
    [DbContext(typeof(FootballBookingSystemContext))]
    partial class FootballBookingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FBS.Repositories.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<int>("BookedId")
                        .HasColumnType("int")
                        .HasColumnName("BookedID");

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951ACD058AD9C1");

                    b.HasIndex("BookedId");

                    b.HasIndex("SlotId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourtID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CourtGroupId")
                        .HasColumnType("int")
                        .HasColumnName("CourtGroupID");

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("CourtId")
                        .HasName("PK__Courts__C3A67CFADA3DF21A");

                    b.HasIndex("CourtGroupId");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtGroup", b =>
                {
                    b.Property<int>("CourtGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourtGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtGroupId"));

                    b.Property<string>("CourtGroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CourtOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("CourtOwnerID");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CourtGroupId")
                        .HasName("PK__CourtGro__8A8CCEA1D026C55E");

                    b.HasIndex("CourtOwnerId");

                    b.ToTable("CourtGroup", (string)null);
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtOwner", b =>
                {
                    b.Property<int>("CourtOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourtOwnerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtOwnerId"));

                    b.Property<string>("CourtOwnerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CourtOwnerTaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CourtOwnerId")
                        .HasName("PK__CourtOwn__CCAAE33272F6190D");

                    b.HasIndex(new[] { "CourtOwnerName" }, "UQ__CourtOwn__488C38F94F059137")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__CourtOwn__A9D10534F3134894")
                        .IsUnique();

                    b.ToTable("CourtOwner", (string)null);
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int>("CourtId")
                        .HasColumnType("int")
                        .HasColumnName("CourtID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SlotStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("SlotId")
                        .HasName("PK__CourtSlo__0A124A4FC9D02690");

                    b.HasIndex(new[] { "CourtId", "Date", "StartTime" }, "UQ__CourtSlo__D8CD2323BD6E4106")
                        .IsUnique();

                    b.ToTable("CourtSlots");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TransactionID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A58D191C5E3");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourtId")
                        .HasColumnType("int")
                        .HasColumnName("CourtID");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AEFC6277B3");

                    b.HasIndex("BookingId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.ReviewReply", b =>
                {
                    b.Property<int>("ReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReplyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReplyId"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<string>("ReplyContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ReplyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.HasKey("ReplyId")
                        .HasName("PK__ReviewRe__C25E4629840B4DD5");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewReplies");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.SharedBooking", b =>
                {
                    b.Property<int>("SharedBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SharedBookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedBookingId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int?>("BookingSize")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateShared")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SharedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("SharedByUserID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SharedBookingId")
                        .HasName("PK__SharedBo__57D6B7FE7B57B275");

                    b.HasIndex("BookingId");

                    b.HasIndex("SharedByUserId");

                    b.ToTable("SharedBookings");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.SharedBookingMember", b =>
                {
                    b.Property<int>("SharedBookingMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SharedBookingMemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SharedBookingMemberId"));

                    b.Property<DateTime>("AccreptedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("SharedBookingId")
                        .HasColumnType("int")
                        .HasColumnName("SharedBookingID");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SharedBookingMemberId")
                        .HasName("PK__SharedBo__73E22CBE8705D671");

                    b.HasIndex("SharedBookingId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("SharedBookingMembers");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int?>("CreatedId")
                        .HasColumnType("int")
                        .HasColumnName("Created_Id");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TeamId")
                        .HasName("PK__Teams__123AE7B9C1C7AF42");

                    b.HasIndex("CreatedId");

                    b.ToTable("Teams", t =>
                        {
                            t.HasTrigger("AddTeamCreatorToTeamMembers");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("FBS.Repositories.Entities.TeamMember", b =>
                {
                    b.Property<int>("TeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TeamMemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamMemberId"));

                    b.Property<DateTime>("DateJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamID");

                    b.Property<string>("TeamRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Team_Role");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TeamMemberId")
                        .HasName("PK__TeamMemb__C7C092851ACC00C1");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateOnly>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACE1135D5A");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534F17C8593")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "UQ__Users__C9F284565D4442A0")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.UserFollower", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.Property<int>("FolloweredId")
                        .HasColumnType("int")
                        .HasColumnName("followered_id");

                    b.Property<DateTime>("FollowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("follow_date")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FollowerId", "FolloweredId")
                        .HasName("PK__UserFoll__8BE0055814CE2158");

                    b.HasIndex("FolloweredId");

                    b.ToTable("UserFollower", (string)null);
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Booking", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.User", "Booked")
                        .WithMany("Bookings")
                        .HasForeignKey("BookedId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Booked__5CD6CB2B");

                    b.HasOne("FBS.Repositories.Entities.CourtSlot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__SlotID__5DCAEF64");

                    b.Navigation("Booked");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Court", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.CourtGroup", "CourtGroup")
                        .WithMany("Courts")
                        .HasForeignKey("CourtGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Courts__CourtGro__52593CB8");

                    b.Navigation("CourtGroup");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtGroup", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.CourtOwner", "CourtOwner")
                        .WithMany("CourtGroups")
                        .HasForeignKey("CourtOwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__CourtGrou__Court__4D94879B");

                    b.Navigation("CourtOwner");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtSlot", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.Court", "Court")
                        .WithMany("CourtSlots")
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("FK__CourtSlot__Court__5812160E");

                    b.Navigation("Court");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Payment", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Bookin__6383C8BA");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Review", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__Booking__693CA210");

                    b.HasOne("FBS.Repositories.Entities.Court", "Court")
                        .WithMany("Reviews")
                        .HasForeignKey("CourtId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__CourtID__6B24EA82");

                    b.HasOne("FBS.Repositories.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__UserID__6A30C649");

                    b.Navigation("Booking");

                    b.Navigation("Court");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.ReviewReply", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.CourtOwner", "Owner")
                        .WithMany("ReviewReplies")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewRep__Owner__70DDC3D8");

                    b.HasOne("FBS.Repositories.Entities.Review", "Review")
                        .WithMany("ReviewReplies")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewRep__Revie__6FE99F9F");

                    b.Navigation("Owner");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.SharedBooking", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.Booking", "Booking")
                        .WithMany("SharedBookings")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__SharedBoo__Booki__75A278F5");

                    b.HasOne("FBS.Repositories.Entities.User", "SharedByUser")
                        .WithMany("SharedBookings")
                        .HasForeignKey("SharedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK__SharedBoo__Share__76969D2E");

                    b.Navigation("Booking");

                    b.Navigation("SharedByUser");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.SharedBookingMember", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.SharedBooking", "SharedBooking")
                        .WithMany("SharedBookingMembers")
                        .HasForeignKey("SharedBookingId")
                        .IsRequired()
                        .HasConstraintName("FK__SharedBoo__Share__7C4F7684");

                    b.HasOne("FBS.Repositories.Entities.Team", "Team")
                        .WithMany("SharedBookingMembers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__SharedBoo__TeamI__7E37BEF6");

                    b.HasOne("FBS.Repositories.Entities.User", "User")
                        .WithMany("SharedBookingMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SharedBoo__UserI__7D439ABD");

                    b.Navigation("SharedBooking");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Team", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.User", "Created")
                        .WithMany("Teams")
                        .HasForeignKey("CreatedId")
                        .HasConstraintName("FK__Teams__Created_I__3F466844");

                    b.Navigation("Created");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.TeamMember", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TeamMembe__TeamI__4316F928");

                    b.HasOne("FBS.Repositories.Entities.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TeamMembe__UserI__440B1D61");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.UserFollower", b =>
                {
                    b.HasOne("FBS.Repositories.Entities.User", "Follower")
                        .WithMany("UserFollowerFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__follo__02084FDA");

                    b.HasOne("FBS.Repositories.Entities.User", "Followered")
                        .WithMany("UserFollowerFollowereds")
                        .HasForeignKey("FolloweredId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__follo__02FC7413");

                    b.Navigation("Follower");

                    b.Navigation("Followered");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Booking", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("SharedBookings");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Court", b =>
                {
                    b.Navigation("CourtSlots");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtGroup", b =>
                {
                    b.Navigation("Courts");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtOwner", b =>
                {
                    b.Navigation("CourtGroups");

                    b.Navigation("ReviewReplies");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.CourtSlot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Review", b =>
                {
                    b.Navigation("ReviewReplies");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.SharedBooking", b =>
                {
                    b.Navigation("SharedBookingMembers");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.Team", b =>
                {
                    b.Navigation("SharedBookingMembers");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("FBS.Repositories.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("SharedBookingMembers");

                    b.Navigation("SharedBookings");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("UserFollowerFollowereds");

                    b.Navigation("UserFollowerFollowers");
                });
#pragma warning restore 612, 618
        }
    }
}
