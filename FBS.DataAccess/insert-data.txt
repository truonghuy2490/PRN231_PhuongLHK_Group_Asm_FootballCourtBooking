-- Create the database
CREATE DATABASE FootballCourtBooking;
GO

-- Use the created database
USE FootballCourtBooking;
GO

-- Create Users table
CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    FullName NVARCHAR(255) NOT NULL,
    UserName NVARCHAR(255) NOT NULL UNIQUE,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    PasswordHash VARBINARY(512) NOT NULL,
    PasswordSalt VARBINARY(512) NOT NULL,
    Role NVARCHAR(50) NOT NULL CHECK (Role IN ('Player', 'Owner')),
    DateCreated DATE NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1
);
GO

-- Create Courts table
CREATE TABLE Courts (
    CourtID INT PRIMARY KEY IDENTITY(1,1),
    Owner_ID INT NOT NULL,
    CourtName NVARCHAR(255) NOT NULL,
    Location NVARCHAR(255) NOT NULL,
    Address NVARCHAR(255),
    Status BIT NOT NULL DEFAULT 1, -- 1 = Active, 0 = Inactive
    Size INT NOT NULL,
    PricePerHour MONEY NOT NULL,
    FOREIGN KEY (Owner_ID) REFERENCES Users(UserID) ON DELETE CASCADE
);
GO

-- Create CourtSlots table
CREATE TABLE CourtSlots (
    SlotID INT PRIMARY KEY IDENTITY(1,1),
    CourtID INT NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    SlotStatus NVARCHAR(50) NOT NULL CHECK (SlotStatus IN ('Available', 'Booked')),
    Date DATE NOT NULL,
    FOREIGN KEY (CourtID) REFERENCES Courts(CourtID) ON DELETE CASCADE,
    UNIQUE (CourtID, Date, StartTime) -- Prevent overlapping slots for the same court on the same date
);



-- Create Bookings table
CREATE TABLE Bookings (
    BookingID INT PRIMARY KEY IDENTITY(1,1),
    UserID INT NOT NULL,
    SlotID INT NOT NULL, 
    Price MONEY NOT NULL,
    BookingDate DATETIME NOT NULL DEFAULT GETDATE(),
    Status NVARCHAR(50) NOT NULL CHECK (Status IN ('Confirmed', 'Pending', 'Cancelled')),
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE NO ACTION,
    FOREIGN KEY (SlotID) REFERENCES CourtSlots(SlotID) ON DELETE NO ACTION
);

-- Create Payments table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT NOT NULL,
    Amount DECIMAL(18,2) NOT NULL,
    PaymentDate DATETIME NOT NULL DEFAULT GETDATE(),
    PaymentMethod NVARCHAR(50) NOT NULL CHECK (PaymentMethod IN ('Credit Card', 'Paypal')),
    TransactionID NVARCHAR(255),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE
);
GO

-- Create Reviews table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT NOT NULL,
    UserID INT NOT NULL,
    CourtID INT NOT NULL,
    Rating DECIMAL CHECK (Rating >= 0 AND Rating <= 5),
    Comment NVARCHAR(500),
    ReviewDate DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE NO ACTION,
    FOREIGN KEY (CourtID) REFERENCES Courts(CourtID) ON DELETE NO ACTION
);
GO

-- Create ReviewReplies table
CREATE TABLE ReviewReplies (
    ReplyID INT PRIMARY KEY IDENTITY(1,1),
    ReviewID INT NOT NULL,
    OwnerID INT NOT NULL,
    ReplyContent NVARCHAR(500),
    ReplyDate DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (ReviewID) REFERENCES Reviews(ReviewID) ON DELETE CASCADE,
    FOREIGN KEY (OwnerID) REFERENCES Users(UserID) ON DELETE NO ACTION
);
GO


-- Insert sample data into Users table
INSERT INTO Users (FullName, UserName, Email, PasswordHash, PasswordSalt, Role, DateCreated, IsActive) VALUES
('John Doe', 'johndoe', 'john@example.com', CONVERT(VARBINARY(512), 'hashedpassword1'), CONVERT(VARBINARY(512), 'salt1'), 'Player', GETDATE(), 1),
('Jane Smith', 'janesmith', 'jane@example.com', CONVERT(VARBINARY(512), 'hashedpassword2'), CONVERT(VARBINARY(512), 'salt2'), 'Player', GETDATE(), 1),
('Mark Johnson', 'markj', 'mark@example.com', CONVERT(VARBINARY(512), 'hashedpassword3'), CONVERT(VARBINARY(512), 'salt3'), 'Owner', GETDATE(), 1),
('Lucy Brown', 'lucyb', 'lucy@example.com', CONVERT(VARBINARY(512), 'hashedpassword4'), CONVERT(VARBINARY(512), 'salt4'), 'Owner', GETDATE(), 1),
('Sam Wilson', 'samwilson', 'sam@example.com', CONVERT(VARBINARY(512), 'hashedpassword5'), CONVERT(VARBINARY(512), 'salt5'), 'Player', GETDATE(), 1),
('Anna Taylor', 'annat', 'anna@example.com', CONVERT(VARBINARY(512), 'hashedpassword6'), CONVERT(VARBINARY(512), 'salt6'), 'Player', GETDATE(), 1);
GO

-- Insert sample data into Courts table
INSERT INTO Courts (Owner_ID, CourtName, Location, Address, Status, Size, PricePerHour) VALUES
(3, 'Super Football Court', 'Downtown', '123 Main St', 1, 5, 50.00),
(4, 'City Center Soccer Field', 'City Center', '456 Center St', 1, 7, 70.00),
(3, 'Green Valley Football Pitch', 'Green Valley', '789 Valley Rd', 1, 6, 60.00);
GO

-- Insert sample data into CourtSlots table
INSERT INTO CourtSlots (CourtID, StartTime, EndTime, SlotStatus, Date) VALUES
(1, '07:00', '09:00', 'Available', '2024-10-16'),
(1, '09:00', '11:00', 'Available', '2024-10-16'),
(2, '10:00', '12:00', 'Available', '2024-10-16'),
(2, '12:00', '14:00', 'Available', '2024-10-16'),
(3, '15:00', '17:00', 'Available', '2024-10-16');
GO

-- Insert sample data into Bookings table
INSERT INTO Bookings (UserID, SlotID, Price, BookingDate, Status) VALUES
(1, 1, 50.00, GETDATE(), 'Confirmed'),
(2, 2, 50.00, GETDATE(), 'Pending'),
(1, 3, 70.00, GETDATE(), 'Confirmed'),
(5, 4, 60.00, GETDATE(), 'Cancelled'),
(6, 5, 60.00, GETDATE(), 'Confirmed');
GO

-- Insert sample data into Payments table
INSERT INTO Payments (BookingID, Amount, PaymentDate, PaymentMethod, TransactionID) VALUES
(1, 50.00, GETDATE(), 'Credit Card', 'TXN123456'),
(2, 50.00, GETDATE(), 'Paypal', 'TXN789012'),
(3, 70.00, GETDATE(), 'Credit Card', 'TXN345678');
GO

-- Insert sample data into Reviews table
INSERT INTO Reviews (BookingID, UserID, CourtID, Rating, Comment, ReviewDate) VALUES
(1, 1, 1, 4.5, 'Great experience, the field was well maintained!', GETDATE()),
(2, 2, 1, 5.0, 'Loved the atmosphere and the service!', GETDATE()),
(3, 1, 2, 3.0, 'The field was a bit dirty, but overall okay.', GETDATE()),
(5, 6, 3, 4.0, 'Good service, would come again!', GETDATE());
GO

-- Insert sample data into ReviewReplies table
INSERT INTO ReviewReplies (ReviewID, OwnerID, ReplyContent, ReplyDate) VALUES
(1, 3, 'Thank you for your feedback! We appreciate it.', GETDATE()),
(2, 4, 'We are glad you enjoyed your time with us!', GETDATE()),
(3, 3, 'We apologize for the cleanliness issue. We will improve!', GETDATE());
GO
