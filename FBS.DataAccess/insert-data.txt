-- Create the FootballBookingSystem Database
CREATE DATABASE FootballBookingSystem;
GO

-- Use the newly created database
USE FootballBookingSystem;
GO

-- Create Users Table
CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    FullName NVARCHAR(255) NOT NULL,
    UserName NVARCHAR(255) NOT NULL UNIQUE,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    Phone NVARCHAR(20),
    PasswordHash VARBINARY(8000) NOT NULL,
    PasswordSalt VARBINARY(8000) NOT NULL,
    DateCreated DATE NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1
);

-- Create Teams Table
CREATE TABLE Teams (
    TeamID INT PRIMARY KEY IDENTITY(1,1),
    TeamName NVARCHAR(255) NOT NULL,
    DateCreated DATETIME NOT NULL DEFAULT GETDATE(),
    Created_Id INT NULL,  -- Reference to the user who created the team
    IsActive BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (Created_Id) REFERENCES Users(UserID)  -- Optional foreign key to the user who created the team
);

-- Create TeamMembers Table (Many-to-Many Relationship)
CREATE TABLE TeamMembers (
    TeamMemberID INT PRIMARY KEY IDENTITY(1,1),
    TeamID INT NOT NULL,  -- Foreign key to Teams
    UserID INT NOT NULL,  -- Foreign key to Users
    DateJoined DATETIME NOT NULL DEFAULT GETDATE(),
    Team_Role NVARCHAR(50) NULL,  -- e.g., 'Creator', 'Player'
    FOREIGN KEY (TeamID) REFERENCES Teams(TeamID) ON DELETE CASCADE,  -- If a team is deleted, delete the associated members
    FOREIGN KEY (UserID) REFERENCES Users(UserID) ON DELETE CASCADE   -- If a user is deleted, delete their membership
);




-- Create CourtOwner Table
CREATE TABLE CourtOwner (
    CourtOwnerID INT PRIMARY KEY IDENTITY(1,1),
    FullName NVARCHAR(255) NOT NULL,
    CourtOwnerName NVARCHAR(255) NOT NULL UNIQUE,
    Email NVARCHAR(255) NOT NULL UNIQUE,
    Phone NVARCHAR(20),
    CourtOwnerTaxCode NVARCHAR(50),
    PasswordHash VARBINARY(8000) NOT NULL,
    PasswordSalt VARBINARY(8000) NOT NULL,
    DateCreated DATE NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1
);

-- Create CourtGroup Table
CREATE TABLE CourtGroup (
    CourtGroupID INT PRIMARY KEY IDENTITY(1,1),
    CourtOwnerID INT NOT NULL,
    CourtGroupName NVARCHAR(255) NOT NULL,
    DateCreated DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (CourtOwnerID) REFERENCES CourtOwner(CourtOwnerID)
);

-- Create Courts Table
CREATE TABLE Courts (
    CourtID INT PRIMARY KEY IDENTITY(1,1),
    CourtGroupID INT NOT NULL,  -- Reference to CourtGroupID
    CourtName NVARCHAR(255) NOT NULL,
    Location NVARCHAR(255) NOT NULL,
    Address NVARCHAR(255),
    Status BIT NOT NULL DEFAULT 1,
    MaxPlayers INT NOT NULL,
    PricePerHour DECIMAL(18,2) NOT NULL,
    IsActive BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (CourtGroupID) REFERENCES CourtGroup(CourtGroupID) ON DELETE CASCADE  -- CASCADE allows for deletion of courts if the group is deleted
);

-- Create CourtSlots Table
CREATE TABLE CourtSlots (
    SlotID INT PRIMARY KEY IDENTITY(1,1),
    CourtID INT NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    SlotStatus NVARCHAR(50) NOT NULL CHECK (SlotStatus IN ('Available', 'Booked')),
    Date DATE NOT NULL,
    IsActive BIT NOT NULL DEFAULT 1,
    UNIQUE (CourtID, Date, StartTime),
    FOREIGN KEY (CourtID) REFERENCES Courts(CourtID)
);

-- Create Bookings Table
CREATE TABLE Bookings (
    BookingID INT PRIMARY KEY IDENTITY(1,1),
    BookedID INT NOT NULL,
    SlotID INT NOT NULL,
    Price DECIMAL(18,2) NOT NULL,
    BookingDate DATETIME NOT NULL DEFAULT GETDATE(),
    Status NVARCHAR(50) NOT NULL CHECK (Status IN ('Confirmed', 'Pending', 'Cancelled')),
    FOREIGN KEY (BookedID) REFERENCES Users(UserID),
    FOREIGN KEY (SlotID) REFERENCES CourtSlots(SlotID)
);

-- Create Payments Table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT NOT NULL,
    Amount DECIMAL(18,2) NOT NULL,
    PaymentDate DATETIME NOT NULL DEFAULT GETDATE(),
    PaymentMethod NVARCHAR(50) NOT NULL CHECK (PaymentMethod IN ('Credit Card', 'Paypal')),
    TransactionID NVARCHAR(255),
    Status NVARCHAR(50) NOT NULL CHECK (Status IN ('Paid', 'Pending', 'Cancelled')),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID)
);

-- Create Reviews Table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT NOT NULL,
    UserID INT NOT NULL,
    CourtID INT NOT NULL,
    Rating DECIMAL CHECK (Rating >= 0 AND Rating <= 5),
    Comment NVARCHAR(500),
    ReviewDate DATETIME NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (CourtID) REFERENCES Courts(CourtID)
);

-- Create ReviewReplies Table
CREATE TABLE ReviewReplies (
    ReplyID INT PRIMARY KEY IDENTITY(1,1),
    ReviewID INT NOT NULL,
    OwnerID INT NOT NULL,
    ReplyContent NVARCHAR(500),
    ReplyDate DATETIME NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (ReviewID) REFERENCES Reviews(ReviewID),
    FOREIGN KEY (OwnerID) REFERENCES CourtOwner(CourtOwnerID)
);


-- Create SharedBookings Table
CREATE TABLE SharedBookings (
    SharedBookingID INT PRIMARY KEY IDENTITY(1,1),
    BookingID INT NOT NULL,
    SharedByUserID INT NOT NULL,
    BookingSize INT,
    DateShared DATETIME NOT NULL DEFAULT GETDATE(),
    Status NVARCHAR(50) NOT NULL CHECK (Status IN ('Opening', 'Closing', 'Full')),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID),
    FOREIGN KEY (SharedByUserID) REFERENCES Users(UserID)
);

-- Create SharedBookingMembers Table
CREATE TABLE SharedBookingMembers (
    SharedBookingMemberID INT PRIMARY KEY IDENTITY(1,1),
    SharedBookingID INT NOT NULL,
    UserID INT NULL,
    TeamID INT NULL,
    IsAccepted BIT NOT NULL DEFAULT 0,
    AccreptedDate DATETIME NOT NULL DEFAULT GETDATE(),
    IsActive BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (SharedBookingID) REFERENCES SharedBookings(SharedBookingID),
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (TeamID) REFERENCES Teams(TeamID) ON DELETE NO ACTION
);

-- Create UserFollower Table
CREATE TABLE UserFollower (
    follower_id INT NOT NULL,
    followered_id INT NOT NULL,
    follow_date DATETIME NOT NULL DEFAULT GETDATE(),
    FOREIGN KEY (follower_id) REFERENCES Users(UserID) ON DELETE NO ACTION,
    FOREIGN KEY (followered_id) REFERENCES Users(UserID) ON DELETE NO ACTION,
    PRIMARY KEY (follower_id, followered_id)
);



-- Insert sample data into Users table
INSERT INTO Users (FullName, UserName, Email, Phone, PasswordHash, PasswordSalt)
VALUES
('Nguyễn Văn A', 'nvana', 'vana@example.com', '0123456789', CAST('hashedpassword1' AS VARBINARY(8000)), CAST('salt1' AS VARBINARY(8000))),
('Trần Thị B', 'ttb', 'tb@example.com', '0987654321', CAST('hashedpassword2' AS VARBINARY(8000)), CAST('salt2' AS VARBINARY(8000))),
('Lê Văn C', 'lvc', 'vc@example.com', '0234567890', CAST('hashedpassword3' AS VARBINARY(8000)), CAST('salt3' AS VARBINARY(8000))),
('Phạm Văn D', 'pvd', 'vd@example.com', '0345678901', CAST('hashedpassword4' AS VARBINARY(8000)), CAST('salt4' AS VARBINARY(8000))),
('Nguyễn Thị E', 'nte', 'te@example.com', '0456789012', CAST('hashedpassword5' AS VARBINARY(8000)), CAST('salt5' AS VARBINARY(8000)));

-- Insert sample data into Teams table
INSERT INTO Teams (TeamName, Created_Id)
VALUES
('Red Warriors', 1),
('Blue Eagles', 2),
('Green Dragons', 3),
('Yellow Lions', 1),
('Black Panthers', 4);

-- Insert sample data into TeamMembers table
INSERT INTO TeamMembers (TeamID, UserID, Team_Role)
VALUES
(1, 1, 'Creator'),
(1, 2, 'Player'),
(2, 3, 'Player'),
(3, 1, 'Player'),
(4, 2, 'Creator');

-- Insert sample data into CourtOwner table
INSERT INTO CourtOwner (FullName, CourtOwnerName, Email, Phone, CourtOwnerTaxCode, PasswordHash, PasswordSalt)
VALUES
('Trần Văn X', 'CourtOwnerX', 'ownerx@example.com', '0567890123', 'TAXCODE1', CAST('hashedpassword6' AS VARBINARY(8000)), CAST('salt6' AS VARBINARY(8000))),
('Nguyễn Thị Y', 'CourtOwnerY', 'ownery@example.com', '0678901234', 'TAXCODE2', CAST('hashedpassword7' AS VARBINARY(8000)), CAST('salt7' AS VARBINARY(8000)));

-- Insert sample data into CourtGroup table
INSERT INTO CourtGroup (CourtOwnerID, CourtGroupName)
VALUES
(1, 'X Group'),
(2, 'Y Group');

-- Insert sample data into Courts table
INSERT INTO Courts (CourtGroupID, CourtName, Location, Address, MaxPlayers, PricePerHour)
VALUES
(1, 'Court A1', 'District 1', '123 Street A', 10, 100.00),
(1, 'Court A2', 'District 1', '124 Street A', 10, 120.00),
(2, 'Court B1', 'District 2', '200 Street B', 8, 80.00),
(2, 'Court B2', 'District 2', '201 Street B', 8, 90.00);

-- Insert sample data into CourtSlots table
INSERT INTO CourtSlots (CourtID, StartTime, EndTime, SlotStatus, Date)
VALUES
(1, '10:00', '12:00', 'Available', '2024-10-21'),
(1, '12:00', '14:00', 'Booked', '2024-10-21'),
(2, '14:00', '16:00', 'Available', '2024-10-21'),
(3, '10:00', '12:00', 'Available', '2024-10-21'),
(4, '12:00', '14:00', 'Booked', '2024-10-21');

-- Insert sample data into Bookings table
INSERT INTO Bookings (BookedID, SlotID, Price, Status)
VALUES
(1, 1, 100.00, 'Confirmed'),
(2, 2, 120.00, 'Pending'),
(3, 3, 80.00, 'Cancelled');

-- Insert sample data into Payments table
INSERT INTO Payments (BookingID, Amount, PaymentMethod, Status)
VALUES
(1, 100.00, 'Credit Card', 'Paid'),
(2, 120.00, 'Paypal', 'Pending'),
(3, 80.00, 'Credit Card', 'Cancelled');

-- Insert sample data into Reviews table
INSERT INTO Reviews (BookingID, UserID, CourtID, Rating, Comment)
VALUES
(1, 1, 1, 5, 'Great court, very clean!'),
(2, 2, 2, 4, 'Nice place, but a bit expensive.'),
(3, 3, 3, 3, 'Average experience.');

-- Insert sample data into ReviewReplies table
INSERT INTO ReviewReplies (ReviewID, OwnerID, ReplyContent)
VALUES
(1, 1, 'Thank you for your feedback!'),
(2, 2, 'We appreciate your comments and will strive to improve.');

-- Insert sample data into SharedBookings table
INSERT INTO SharedBookings (BookingID, SharedByUserID, BookingSize, Status)
VALUES
(1, 1, 5, 'Opening'),
(2, 2, 3, 'Closing');

-- Insert sample data into SharedBookingMembers table
INSERT INTO SharedBookingMembers (SharedBookingID, UserID, TeamID)
VALUES
(1, 1, 1),
(1, 2, 1),
(2, 3, 2);

-- Insert sample data into UserFollower table
INSERT INTO UserFollower (follower_id, followered_id)
VALUES
(1, 2),
(2, 1),
(3, 1);



-- Create Trigger to Automatically Add Team Creator as Team Member
CREATE TRIGGER AddTeamCreatorToTeamMembers
ON Teams
AFTER INSERT
AS
BEGIN
    -- Insert the creator into TeamMembers table with the role of 'Creator'
    INSERT INTO TeamMembers (TeamID, UserID, DateJoined, Team_Role)
    SELECT inserted.TeamID, inserted.Created_Id, GETDATE(), 'Creator'
    FROM inserted
    WHERE inserted.Created_Id IS NOT NULL;
END;
